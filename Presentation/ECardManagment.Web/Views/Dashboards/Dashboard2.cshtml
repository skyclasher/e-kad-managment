@{
	ViewData["Title"] = "Dashboard";
}
@inject IJsonHelper Json;
@using ECardManagment.Framework.Constants
@using ProjectConstant = Project.Framework.Constants;
@model ECardManagment.ViewModel.Dashboards.DashboardVM


@{
	var rsvpData = Model.RsvpData;
}
<!-- Content Header (Page header) -->
<section class="content-header">
	<h1>
		Dashboard
		<small>Statistic</small>
	</h1>
	<ol class="breadcrumb">
		<li><a href="#"><i class="fa fa-dashboard"></i> Home</a></li>
		<li class="active">Dashboard</li>
	</ol>
</section>

<!-- Main content -->
<section class="content">
	<!-- Main row -->
	<!-- Left col -->
	<div class="row  box box-default">
		<div class="col-md-6">
			<div class="box-header with-border">
				<h3 class="box-title">Kehadiran</h3>
			</div>
			<!-- /.box-header -->
			<div class="box-body">
				<div class="row">
					<div class="col-md-8">
						<div class="chart-responsive">
							<canvas id="pieChart" height="150"></canvas>
						</div>
						<!-- ./chart-responsive -->
					</div>
					<!-- /.col -->
					<div class="col-md-4">
						<ul class="chart-legend clearfix">
							<li><i class="fa fa-circle-o text-green"></i> Hadir</li>
							<li><i class="fa fa-circle-o text-yellow"></i> Mungkin</li>
							<li><i class="fa fa-circle-o text-red"></i> Tidak hadir</li>
						</ul>
					</div>
					<!-- /.col -->
				</div>
				<!-- /.row -->
			</div>
			<!-- /.box-body -->
			<div class="box-footer col-md-4">
				<ul class="nav nav-pills nav-stacked">
					<li>
						@*<a href="#">
						*@
						Petunjuk
						<span class="pull-right"> Bilangan</span>
						@*
							</a>*@
					</li>
					<li>
						@*<a href="#">
						*@
						Hadir
						<span class="pull-right text-green"> @Model.RsvpData.Where(y => y.Attendance == "H").ToList().Sum(x => x.AttCount)</span>
						@*
							</a>*@
					</li>
					<li>
						Mungkin <span class="pull-right text-yellow"> @Model.RsvpData.Where(y => y.Attendance == "M").ToList().Sum(x => x.AttCount)</span>
					</li>
					<li>
						Tidak Hadir
						<span class="pull-right text-red"> @Model.RsvpData.Where(y => y.Attendance == "T").ToList().Count</span>
					</li>
					<li>
						Tiada Jawapan
						<span class="pull-right text-gray"> @Model.RsvpData.Where(y => y.Attendance != "H" && y.Attendance != "M" && y.Attendance != "T").ToList().Sum(x => x.AttCount)</span>
					</li>
				</ul>
			</div>
			<!-- /.footer -->
		</div>
		<div class="col-md-6">
			<div class="box-header with-border">
				<h3 class="box-title">Perincian Kehadiran</h3>
			</div>
			<!-- /.box-header -->
			<div class="box-body">
				@await Html.PartialAsync(Constant.ViewPath.RsvpAttendListing, Model.PagedAttendRsvpData)
			</div>
			<!-- /.box-header -->
			<div class="box-body">
				@await Html.PartialAsync(Constant.ViewPath.RsvpMaybeAttendListing, Model.PagedMaybeAttendRsvpData)
			</div>
			<!-- /.box-header -->
			<div class="box-body">
				@await Html.PartialAsync(Constant.ViewPath.RsvpNotAttendListing, Model.PagedNotAttendRsvpData)
			</div>
		</div>
		<!-- /.box -->
	</div>
	<!-- /.col -->
	<!-- /.col -->
</section>
<!-- /.content -->
@section Scripts {
	<!-- ChartJS -->
	<script src="~/libs/chart.js/Chart.min.js"></script>

	<script>

		$(function () {
			'use strict';

			/* ChartJS
			 * -------
			 * Here we will create a few charts using ChartJS
			 */

			// -------------
			// - PIE CHART -
			// -------------
			// Get context with jQuery - using jQuery's .get() method.
			var pieChartCanvas = $('#pieChart').get(0).getContext('2d');
			var pieChart = new Chart(pieChartCanvas);
			var PieData = JSON.parse(@Html.Raw(Json.Serialize(@Model.RsvpChartVM.jsonData)));
			var pieOptions = {
				// Boolean - Whether we should show a stroke on each segment
				segmentShowStroke: true,
				// String - The colour of each segment stroke
				segmentStrokeColor: '#fff',
				// Number - The width of each segment stroke
				segmentStrokeWidth: 1,
				// Number - The percentage of the chart that we cut out of the middle
				percentageInnerCutout: 50, // This is 0 for Pie charts
				// Number - Amount of animation steps
				animationSteps: 100,
				// String - Animation easing effect
				animationEasing: 'easeOutBounce',
				// Boolean - Whether we animate the rotation of the Doughnut
				animateRotate: true,
				// Boolean - Whether we animate scaling the Doughnut from the centre
				animateScale: false,
				// Boolean - whether to make the chart responsive to window resizing
				responsive: true,
				// Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
				maintainAspectRatio: false,
				// String - A legend template
				legendTemplate: '<ul class=\'<%=name.toLowerCase()%>-legend\'><% for (var i=0; i<segments.length; i++){%><li><span style=\'background-color:<%=segments[i].fillColor%>\'></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>',
				// String - A tooltip template
				tooltipTemplate: '<%=value %> <%=label%>',
			};
			// Create pie or douhnut chart
			// You can switch between pie and douhnut using the method below.
			pieChart.Doughnut(PieData, pieOptions);
			// -----------------
			// - END PIE CHART -
			// -----------------
		});
	</script>
}
